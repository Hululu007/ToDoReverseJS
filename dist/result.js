
!(function (graph) 
{
    function require(file)
    {
        function absRequire(relPath)
        {
            return require(graph[file].deps[relPath]);
        }
        var exports = {};
        (function (require, exports, code)
        {
            eval(code);
        })(absRequire, exports, graph[file].code);
        return exports
    }
    require('./src/yourProgram.js')
})({
  "./src/yourProgram.js": {
    "deps": {
      "./Log.js": "src\\Log.js",
      "./TextStorage.js": "src\\TextStorage.js",
      "./utiles.js": "src\\utiles.js",
      "./stringify.js": "src\\stringify.js",
      "./proxy.js": "src\\proxy.js"
    },
    "code": "\"use strict\";\n\nvar _Log = require(\"./Log.js\");\nvar _TextStorage = require(\"./TextStorage.js\");\nvar _utiles = require(\"./utiles.js\");\nvar _stringify = require(\"./stringify.js\");\nvar _proxy2 = require(\"./proxy.js\");\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); } // 一个案例\nvar StackTrace = /*#__PURE__*/function () {\n  function StackTrace() {\n    var open = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    var details = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    var lengthLimit = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 50;\n    var toBlobLimit = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1024 * 256;\n    _classCallCheck(this, StackTrace);\n    _defineProperty(this, \"open\", void 0);\n    // 开关\n    _defineProperty(this, \"details\", void 0);\n    // 详细代理日志\n    _defineProperty(this, \"line\", void 0);\n    // 日志行数\n    _defineProperty(this, \"log\", void 0);\n    // 调试打印\n    _defineProperty(this, \"textStorage\", void 0);\n    // 日志的存储\n    _defineProperty(this, \"getType\", void 0);\n    _defineProperty(this, \"stringify\", void 0);\n    this.open = open;\n    this.details = details;\n    this.lengthLimit = lengthLimit;\n    this.log = new _Log.Log();\n    this.textStorage = new _TextStorage.TextStorage(toBlobLimit);\n    this.getType = _utiles.getType;\n    this.stringify = function (variable) {\n      return (0, _stringify.stringify)(variable, lengthLimit);\n    };\n  }\n  return _createClass(StackTrace, [{\n    key: \"proxy\",\n    value: function proxy(proxyObject, name) {\n      var _this = this;\n      var debug = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;\n      return (0, _proxy2.proxy)(proxyObject, name, function (name, mode, target, property, value) {\n        if (!_this.open) return;\n        var content;\n        var text;\n        if (_this.details) content = _this.stringify(target);else content = _this.stringify(value);\n        text = \"\".concat(name, \"|\").concat(mode, \"| \\u4E0B\\u6807: \").concat(property.toString(), \" \\u5185\\u5BB9: \").concat(content, \"\\r\\n\");\n        _this.textStorage.add(text);\n        _this.line += 1;\n\n        // 断点\n        if (debug instanceof Function) {\n          debug(_this.line, name, mode, property.toString(), content);\n        }\n      });\n    }\n  }, {\n    key: \"download\",\n    value: function download() {\n      var fileName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '日志.txt';\n      this.textStorage.download(fileName);\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this.textStorage.clear();\n    }\n  }]);\n}();\nwindow.noting = {\n  StackTrace: StackTrace\n};"
  },
  "src\\Log.js": {
    "deps": {},
    "code": "\"use strict\";\n\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Log = void 0;\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _classPrivateMethodInitSpec(e, a) { _checkPrivateRedeclaration(e, a), a.add(e); }\nfunction _checkPrivateRedeclaration(e, t) { if (t.has(e)) throw new TypeError(\"Cannot initialize the same private elements twice on an object\"); }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction _assertClassBrand(e, t, n) { if (\"function\" == typeof e ? e === t : e.has(t)) return arguments.length < 3 ? t : n; throw new TypeError(\"Private element is not present on this object\"); }\nvar _Log_brand = /*#__PURE__*/new WeakSet();\nvar Log = exports.Log = /*#__PURE__*/function () {\n  function Log() {\n    var open = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    _classCallCheck(this, Log);\n    /**\r\n     * 控制打印\r\n     * @param {string} content \r\n     * @param {string} mode \r\n     * @returns \r\n     */\n    _classPrivateMethodInitSpec(this, _Log_brand);\n    _defineProperty(this, \"open\", void 0);\n    this.open = open;\n  }\n  return _createClass(Log, [{\n    key: \"debug\",\n    value:\n    /**\r\n     * @param {*} message \r\n     */\n    function debug(message) {\n      var content = \"[debug] \".concat(message);\n      _assertClassBrand(_Log_brand, this, _print).call(this, content, \"debug\");\n    }\n\n    /**\r\n     * @param {*} message \r\n     */\n  }, {\n    key: \"error\",\n    value: function (_error) {\n      function error(_x) {\n        return _error.apply(this, arguments);\n      }\n      error.toString = function () {\n        return _error.toString();\n      };\n      return error;\n    }(function (message) {\n      var content = \"[error] \".concat(message);\n      _assertClassBrand(_Log_brand, this, _print).call(this, content, error);\n    }\n\n    /**\r\n     * 自定义标签\r\n     * @param {string} label \r\n     * @param {*} message \r\n     */)\n  }, {\n    key: \"log\",\n    value: function log() {\n      var label = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"debug\";\n      var message = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"\";\n      var content = \"[\".concat(label, \"] \").concat(message);\n      _assertClassBrand(_Log_brand, this, _print).call(this, content, \"log\");\n    }\n  }]);\n}();\nfunction _print(content, mode) {\n  if (this.open == false) return;\n  switch (mode) {\n    case \"error\":\n      console.error(content);\n      break;\n    default:\n      console.log(content);\n      break;\n  }\n}"
  },
  "src\\TextStorage.js": {
    "deps": {},
    "code": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TextStorage = void 0;\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nvar TextStorage = exports.TextStorage = /*#__PURE__*/function () {\n  function TextStorage() {\n    var strLengthLimit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1024 * 256;\n    _classCallCheck(this, TextStorage);\n    _defineProperty(this, \"strLengthLimit\", void 0);\n    _defineProperty(this, \"stringCache\", void 0);\n    _defineProperty(this, \"blobCache\", void 0);\n    this.strLengthLimit = strLengthLimit;\n    this.stringCache = \"\";\n    this.blobCache = new Blob([''], {\n      type: 'text/plain'\n    });\n  }\n\n  /**\r\n   * 添加内容\r\n   * @param {string} string \r\n   * @returns {boolean}\r\n   */\n  return _createClass(TextStorage, [{\n    key: \"add\",\n    value: function add() {\n      var string = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n      if (typeof string != \"string\") throw \"传入的参数有误！\";\n      this.stringCache += string;\n      if (this.stringCache.length > this.strLengthLimit) blobStored();\n      return true;\n    }\n\n    /**\r\n     * 将 string 用 blob 存储\r\n     */\n  }, {\n    key: \"blobStored\",\n    value: function blobStored() {\n      var blob = new Blob([this.stringCache], {\n        type: 'text/plain'\n      });\n      this.stringCache = \"\";\n      this.blobCache = new Blob([this.blobCache, blob], {\n        type: 'text/plain'\n      });\n    }\n\n    /**\r\n     * 清理存储\r\n     */\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this.stringCache = \"\";\n      this.blobCache = new Blob([''], {\n        type: 'text/plain'\n      });\n    }\n\n    /**\r\n     * 下载存储的文本到本地\r\n     * @param {string} fileName \r\n     */\n  }, {\n    key: \"download\",\n    value: function download() {\n      var fileName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '日志.txt';\n      if (this.stringCache != \"\") blobStored();\n\n      // 在浏览器中运行\n      var link = document.createElement('a');\n      link.href = URL.createObjectURL(window.nothing._blob);\n      link.download = fileName;\n      link.click();\n      link.remove();\n      URL.revokeObjectURL(link.href);\n      clear(); // 下载完就清理\n    }\n  }]);\n}();"
  },
  "src\\utiles.js": {
    "deps": {},
    "code": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getType = getType;\nexports.isCycle = isCycle;\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\n/**\r\n * 获取目标类型\r\n * @param {*} target \r\n * @returns 'undefined', 'null', 'boolean', 'string', 'number', 'symbol', 'array', 'object', 'function', 'arraybuffer'\r\n */\nfunction getType(target) {\n  if (Array.isArray(target)) return 'array';else if (target && target.buffer) return 'arraybuffer'; // target instanceof ArrayBuffer 不算在内\n  else if (target == null) return 'null';\n  return _typeof(target);\n}\n\n/**\r\n * 判断对象循环引用\r\n * @param {object} object \r\n * @param {WeakSet} seen \r\n * @returns {boolean}\r\n */\nfunction isCycle(object) {\n  var seen = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new WeakSet();\n  if (object && _typeof(object) === 'object') {\n    if (seen.has(object)) return true;\n    seen.add(object);\n    for (var _i = 0, _Object$keys = Object.keys(object); _i < _Object$keys.length; _i++) {\n      var key = _Object$keys[_i];\n      if (isCycle(object[key], seen)) return true;\n    }\n  }\n  return false;\n}"
  },
  "src\\stringify.js": {
    "deps": {
      "./utiles.js": "src\\utiles.js"
    },
    "code": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.stringify = stringify;\nvar _utiles = require(\"./utiles.js\");\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _createForOfIteratorHelper(r, e) { var t = \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && \"number\" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t[\"return\"] || t[\"return\"](); } finally { if (u) throw o; } } }; }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if (\"string\" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\n/**\r\n * 字符串打印优化\r\n * @param {string} str \r\n * @param {number} lengthLimit \r\n * @returns {string}\r\n */\nfunction stringifyString(str, lengthLimit) {\n  if (str.length <= lengthLimit) return str;\n  var halfLimit = Math.floor(lengthLimit / 2);\n  var start = str.substring(0, halfLimit);\n  var end = str.substring(str.length - halfLimit);\n  return \"\".concat(start, \"\\xB7\\xB7\\xB7\").concat(end, \"|length \").concat(str.length, \"|\");\n}\n\n/**\r\n * 判断一个数组是否全是数字\r\n * @param {Array} array \r\n * @returns {boolean}\r\n */\nfunction isNumberArray(array) {\n  var _iterator = _createForOfIteratorHelper(array),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var i = _step.value;\n      if (typeof i != \"number\") return false;\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  return true;\n}\n\n/**\r\n * 全数字数组打印优化\r\n * @param {object} array \r\n * @param {number} lengthLimit \r\n * @returns {string}\r\n */\nfunction shortedNumberArray(array, lengthLimit) {\n  array = Array.from(array); // 针对字节数组\n\n  if (array.length <= lengthLimit) return array.join(',');else {\n    var halfLimit = Math.floor(lengthLimit / 2);\n    var start = array.slice(0, halfLimit);\n    var end = array.slice(-halfLimit);\n    var middle = '···';\n    return start.concat(middle, end).join(',');\n  }\n}\n\n/**\r\n * 将数组字符串化，并做一些打印优化\r\n * @param {Array} array \r\n * @param {number} lengthLimit \r\n */\nfunction stringifyArray(array, lengthLimit, seen) {\n  if (isNumberArray(array)) {\n    var res = shortedNumberArray(array, lengthLimit);\n    if (array.length <= lengthLimit) return \"[\".concat(res, \"]\");else return \"[\".concat(res, \"]|length \").concat(array.length, \", tpye array|\");\n  } else {\n    var _res = \"[\";\n    var _iterator2 = _createForOfIteratorHelper(array),\n      _step2;\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var i = _step2.value;\n        var temp = stringify(i, lengthLimit, seen);\n        if (temp != \"undefined\") _res += temp;\n        _res += \",\";\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n    _res = _res.slice(0, -1) + ']';\n    return _res;\n  }\n}\n\n/**\r\n * 将字节数组字符串化，并做一些打印优化\r\n * @param {object} arraybuffer \r\n * @param {number} lengthLimit \r\n * @returns \r\n */\nfunction stringifyArrayBuffer(arraybuffer, lengthLimit) {\n  var res = shortedNumberArray(arraybuffer, lengthLimit);\n  if (arraybuffer.length <= lengthLimit) return \"[\".concat(res, \"]\");else return \"[\".concat(res, \"]|length \").concat(arraybuffer.length, \", tpye arraybuffer|\");\n}\n\n/**\r\n * 将对象字符串化，并做一些打印优化\r\n * @param {object} object \r\n * @param {WeakSet} seen 存储递归中已遍历的对象\r\n */\nfunction stringifyObject(object, lengthLimit, seen) {\n  if (seen.has(object)) return \"|seen|\";\n  seen.add(object);\n  var res = \"{\";\n  var keys = Object.keys(object);\n  for (var _i = 0, _keys = keys; _i < _keys.length; _i++) {\n    var key = _keys[_i];\n    res += key;\n    res += \":\";\n    res += stringify(object[key], lengthLimit, seen);\n    res += \",\";\n  }\n  res = res.slice(0, -1) + '}';\n  return res;\n}\n\n/**\r\n * 检查是否是浏览器对象 window、document、navigator...\r\n * @param {object} variable \r\n * @returns {undefined | string}\r\n */\nfunction isBrowserObject(variable) {\n  var ret;\n  if (variable && variable[Symbol.toStringTag]) {\n    if (_typeof(variable) != \"symbol\" && (0, _utiles.getType)(variable) != 'arraybuffer') {\n      ret = variable[Symbol.toStringTag].toLowerCase();\n    }\n  }\n  return ret;\n}\n\n/**\r\n * 字符串化\r\n * @param {object} variable \r\n * @param {number} lengthLimit 单个成员长度限制\r\n * @param {WeakSet} seen 用来解决对象循环引用，使用时不用理会\r\n */\nfunction stringify(variable) {\n  var lengthLimit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 50;\n  var seen = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : new WeakSet();\n  var check = isBrowserObject(variable);\n  if (check) return check;\n  var type = (0, _utiles.getType)(variable);\n  switch (type) {\n    case \"string\":\n      return stringifyString(variable, lengthLimit);\n    case \"array\":\n      return stringifyArray(variable, lengthLimit, seen);\n    case \"arraybuffer\":\n      return stringifyArrayBuffer(variable, lengthLimit);\n    case \"object\":\n      return stringifyObject(variable, lengthLimit, seen);\n    case \"symbol\":\n      return variable.toString();\n    case \"function\":\n      return variable.name ? \"function \".concat(variable.name) : \"function anonymous\";\n    default:\n      // 'undefined', 'null', 'boolean', 'number'\n      return \"\" + variable;\n  }\n}"
  },
  "src\\proxy.js": {
    "deps": {},
    "code": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.proxy = proxy;\nfunction _toConsumableArray(r) { return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if (\"string\" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _iterableToArray(r) { if (\"undefined\" != typeof Symbol && null != r[Symbol.iterator] || null != r[\"@@iterator\"]) return Array.from(r); }\nfunction _arrayWithoutHoles(r) { if (Array.isArray(r)) return _arrayLikeToArray(r); }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\n/**\r\n * 创建一个代理对象，用于拦截并处理对象的属性访问。\r\n * @param {object} proxyObject 要被代理的目标对象。\r\n * @param {string} name 日志中的命名。\r\n * @param {Function | *} callBackFunc 被调用时的回调函数，该函数接收以下参数：\r\n *   - {string} name - 日志中的命名。\r\n *   - {string} mode - 代理的操作模式，例如 'get' 或 'set'。\r\n *   - {object} target - 代理的目标对象。\r\n *   - {string?} property - 被访问的属性。\r\n *   - {*} value - 用到的值。\r\n * @returns {Proxy} 返回创建的代理对象。\r\n */\nfunction proxy(proxyObject, name, callBackFunc) {\n  // 句柄\n  var handler = {\n    getPrototypeOf: function getPrototypeOf(target) {\n      /* 捕获 \r\n      Object.getPrototypeOf()\r\n      Object.prototype.__proto__\r\n      Object.prototype.isPrototypeOf()\r\n      instanceof\r\n      */\n      return _proxyHandleTemplate(name, 'getPrototypeOf', target, undefined, [target], callBackFunc);\n    },\n    setPrototypeOf: function setPrototypeOf(target, prototype) {\n      /* 捕获 \r\n      Object.setPrototypeOf()\r\n      */\n      return _proxyHandleTemplate(name, 'setPrototypeOf', target, undefined, [target, prototype], callBackFunc);\n    },\n    isExtensible: function isExtensible(target) {\n      /* 捕获 \r\n      Object.isExtensible()\r\n      */\n      return _proxyHandleTemplate(name, 'isExtensible', target, undefined, [target], callBackFunc);\n    },\n    preventExtensions: function preventExtensions(target) {\n      /* 捕获 \r\n      Object.preventExtensions()\r\n      */\n      return _proxyHandleTemplate(name, 'preventExtensions', target, undefined, [target], callBackFunc);\n    },\n    getOwnPropertyDescriptor: function getOwnPropertyDescriptor(target, property) {\n      /* 捕获 \r\n      Object.getOwnPropertyDescriptor()\r\n      */\n      return _proxyHandleTemplate(name, 'getOwnPropertyDescriptor', target, property, [target, property], callBackFunc);\n    },\n    defineProperty: function defineProperty(target, property, descriptor) {\n      /* 捕获 \r\n      Object.defineProperty()\r\n      */\n      return _proxyHandleTemplate(name, 'defineProperty', target, property, [target, property, descriptor], callBackFunc);\n    },\n    has: function has(target, property) {\n      /* 捕获 \r\n      属性查询：foo in proxy\r\n      继承属性查询：foo in Object.create(proxy)\r\n      with 检查: with(proxy) { (foo); }\r\n      */\n      return _proxyHandleTemplate(name, 'has', target, property, [target, property], callBackFunc);\n    },\n    get: function get(target, property, receiver) {\n      /* 捕获 \r\n      访问属性：proxy[foo] 和 proxy.bar\r\n      访问原型链上的属性：Object.create(proxy)[foo]\r\n      */\n      return _proxyHandleTemplate(name, 'get', target, property, [target, property, receiver], callBackFunc);\n    },\n    set: function set(target, property, value, receiver) {\n      /* 捕获 \r\n      指定属性值：proxy[foo] = bar 和 proxy.foo = bar\r\n      指定继承者的属性值：Object.create(proxy)[foo] = bar\r\n      */\n      return _proxyHandleTemplate(name, 'set', target, property, [target, property, value, receiver], callBackFunc);\n    },\n    deleteProperty: function deleteProperty(target, property) {\n      /* 捕获 \r\n      删除属性：delete proxy[foo] 和 delete proxy.foo\r\n      */\n      return _proxyHandleTemplate(name, 'deleteProperty', target, property, [target, property], callBackFunc);\n    },\n    ownKeys: function ownKeys(target) {\n      /* 捕获 \r\n      Object.getOwnPropertyNames()\r\n      Object.getOwnPropertySymbols()\r\n      Object.keys()\r\n      */\n      return _proxyHandleTemplate(name, 'ownKeys', target, undefined, [target], callBackFunc);\n    },\n    apply: function apply(target, thisArg, argumentsList) {\n      /* 捕获 \r\n      proxy(...args)\r\n      Function.prototype.apply() 和 Function.prototype.call()\r\n      Object.keys()\r\n      */\n      return _proxyHandleTemplate(name, 'apply', target, undefined, [target, thisArg, argumentsList], callBackFunc);\n    },\n    construct: function construct(target, argumentsList, newTarget) {\n      /* 捕获 \r\n      new proxy(...args)\r\n      */\n      return _proxyHandleTemplate(name, 'construct', target, undefined, [target, argumentsList, newTarget], callBackFunc);\n    }\n  };\n  return new Proxy(proxyObject, handler);\n}\n\n/**\r\n * 代理中的模板\r\n * @param {string} name \r\n * @param {string} mode \r\n * @param {object} target \r\n * @param {string} property \r\n * @param {Array} args \r\n * @param {Function | *} callBackFunc \r\n * @returns \r\n */\nfunction _proxyHandleTemplate(name, mode, target, property, args, callBackFunc) {\n  var result;\n  var value;\n  switch (mode) {\n    case \"getPrototypeOf\":\n      result = Reflect.getPrototypeOf.apply(Reflect, _toConsumableArray(args));\n      value = result;\n      break;\n    case \"setPrototypeOf\":\n      result = Reflect.setPrototypeOf.apply(Reflect, _toConsumableArray(args));\n      value = args[1];\n      break;\n    case \"isExtensible\":\n      result = Reflect.isExtensible.apply(Reflect, _toConsumableArray(args));\n      value = result;\n      break;\n    case \"preventExtensions\":\n      result = Reflect.preventExtensions.apply(Reflect, _toConsumableArray(args));\n      value = result;\n      break;\n    case \"getOwnPropertyDescriptor\":\n      result = Reflect.getOwnPropertyDescriptor.apply(Reflect, _toConsumableArray(args));\n      value = result;\n      break;\n    case \"defineProperty\":\n      result = Reflect.defineProperty.apply(Reflect, _toConsumableArray(args));\n      value = args[2];\n      break;\n    case \"has\":\n      result = Reflect.has.apply(Reflect, _toConsumableArray(args));\n      value = result;\n      break;\n    case \"get\":\n      result = Reflect.get.apply(Reflect, _toConsumableArray(args));\n      value = result;\n      break;\n    case \"set\":\n      result = Reflect.set.apply(Reflect, _toConsumableArray(args));\n      value = args[2];\n      break;\n    case \"deleteProperty\":\n      result = Reflect.deleteProperty.apply(Reflect, _toConsumableArray(args));\n      value = result;\n      break;\n    case \"ownKeys\":\n      result = Reflect.ownKeys.apply(Reflect, _toConsumableArray(args));\n      value = result;\n      break;\n    case \"apply\":\n      result = Reflect.apply.apply(Reflect, _toConsumableArray(args));\n      value = result;\n      break;\n    case \"construct\":\n      result = Reflect.construct.apply(Reflect, _toConsumableArray(args));\n      value = result;\n      break;\n  }\n\n  // 回调函数，扩展代理功能\n  if (callBackFunc instanceof Function) {\n    try {\n      callBackFunc(name, mode, target, property, value);\n    } catch (error) {\n      throw \"传入的回调函数报错\\n\" + error;\n    }\n  }\n  return result;\n}"
  }
});
    